// This file is auto-generated by @hey-api/openapi-ts

import {
  type Client,
  formDataBodySerializer,
  type Options as ClientOptions,
  type TDataShape
} from '@hey-api/client-fetch'
import type {
  AppControllerIsReadyData,
  AuthControllerChangePasswordData,
  AuthControllerChangePasswordResponse,
  AuthControllerForgotPasswordData,
  AuthControllerForgotPasswordResponse,
  AuthControllerGetProfileData,
  AuthControllerGetProfileResponse,
  AuthControllerLoginData,
  AuthControllerLoginResponse,
  AuthControllerLogoutData,
  AuthControllerLogoutResponse,
  AuthControllerRefreshTokenData,
  AuthControllerRefreshTokenResponse,
  AuthControllerRegisterData,
  AuthControllerResetPasswordData,
  AuthControllerResetPasswordResponse,
  AuthControllerUpdateProfileData,
  DocsControllerDraftData,
  DocsControllerDraftResponse,
  DocsControllerDraftsFindAllData,
  DocsControllerDraftsFindAllResponse,
  DocsControllerFindAllData,
  DocsControllerFindAllResponse,
  DocsControllerFindOneData,
  DocsControllerFindOneResponse,
  DocsControllerGenerateDocData,
  DocsControllerGenerateDocResponse,
  DocsControllerGenerateSlidesDocData,
  DocsControllerGenerateSlidesDocResponse,
  DocsControllerRemoveData,
  DocsControllerRemoveSlideData,
  DocsControllerUpdateData,
  DocsControllerUpdateDraftData,
  DocsControllerUpdateDraftResponse,
  DocsControllerUpdateResponse,
  DocsControllerUpdateSlideData,
  DocsControllerUpdateSlideResponse,
  DocsControllerUploadFileAsPromptData,
  FilesControllerCreateData,
  FilesControllerCreateResponse,
  FilesControllerFindAllData,
  FilesControllerFindAllResponse,
  FilesControllerFindOneData,
  FilesControllerRemoveData,
  FilesControllerRemoveResponse,
  FolderControllerAddMemberToFolderData,
  FolderControllerCreateData,
  FolderControllerCreateResponse,
  FolderControllerFindAllData,
  FolderControllerFindAllResponse,
  FolderControllerFindOneData,
  FolderControllerFindOneResponse,
  FolderControllerRemoveData,
  FolderControllerRemoveMemberFromFolderData,
  FolderControllerUpdateData,
  FolderControllerUpdateResponse,
  FontsControllerFindAllData,
  FontsControllerFindAllResponse,
  FontsControllerFindOneData,
  ThemeControllerFindAllData,
  ThemeControllerFindAllResponse,
  ThemeControllerFindOneData,
  UsersControllerCreateData,
  UsersControllerCreateResponse,
  UsersControllerFindAllData,
  UsersControllerFindAllResponse,
  UsersControllerFindAllRolesData,
  UsersControllerFindAllRolesResponse,
  UsersControllerFindOneData,
  UsersControllerFindOneResponse,
  UsersControllerRemoveData,
  UsersControllerRemoveResponse,
  UsersControllerUpdateData,
  UsersControllerUpdateResponse,
  UsersControllerUpdateUserRoleData,
  UsersControllerUpdateUserRoleResponse,
  WorkspaceControllerAcceptInviteData,
  WorkspaceControllerExcludeMemberData,
  WorkspaceControllerFindOneData,
  WorkspaceControllerFindOneResponse,
  WorkspaceControllerUpdateData,
  WorkspaceControllerUpdateResponse
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> =
  ClientOptions<TData, ThrowOnError>
  & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
};

/**
 * Api is ready
 */
export const appControllerIsReady = <ThrowOnError extends boolean = false> (options?: Options<AppControllerIsReadyData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/api/helthcheck',
    ...options
  })
}

export const authControllerLogin = <ThrowOnError extends boolean = false> (options: Options<AuthControllerLoginData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<AuthControllerLoginResponse, unknown, ThrowOnError>({
    url: '/api/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const authControllerRegister = <ThrowOnError extends boolean = false> (options: Options<AuthControllerRegisterData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/auth/sign-up',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const authControllerRefreshToken = <ThrowOnError extends boolean = false> (options: Options<AuthControllerRefreshTokenData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<AuthControllerRefreshTokenResponse, unknown, ThrowOnError>({
    url: '/api/auth/refresh-token',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const authControllerForgotPassword = <ThrowOnError extends boolean = false> (options: Options<AuthControllerForgotPasswordData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<AuthControllerForgotPasswordResponse, unknown, ThrowOnError>({
    url: '/api/auth/forgot-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const authControllerResetPassword = <ThrowOnError extends boolean = false> (options: Options<AuthControllerResetPasswordData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<AuthControllerResetPasswordResponse, unknown, ThrowOnError>({
    url: '/api/auth/reset-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Изменение пароля пользователя
 */
export const authControllerChangePassword = <ThrowOnError extends boolean = false> (options: Options<AuthControllerChangePasswordData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<AuthControllerChangePasswordResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/auth/change-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Получить свой профиль
 */
export const authControllerGetProfile = <ThrowOnError extends boolean = false> (options?: Options<AuthControllerGetProfileData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<AuthControllerGetProfileResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/auth/me',
    ...options
  })
}

/**
 * Обновить свой профиль
 */
export const authControllerUpdateProfile = <ThrowOnError extends boolean = false> (options: Options<AuthControllerUpdateProfileData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/auth/me',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Выйти из аккаунта
 */
export const authControllerLogout = <ThrowOnError extends boolean = false> (options?: Options<AuthControllerLogoutData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<AuthControllerLogoutResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/auth/logout',
    ...options
  })
}

/**
 * Получить всех пользователей
 */
export const usersControllerFindAll = <ThrowOnError extends boolean = false> (options?: Options<UsersControllerFindAllData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<UsersControllerFindAllResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/admin/users',
    ...options
  })
}

/**
 * Добавить пользователя
 */
export const usersControllerCreate = <ThrowOnError extends boolean = false> (options: Options<UsersControllerCreateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<UsersControllerCreateResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/admin/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Получить все роли
 */
export const usersControllerFindAllRoles = <ThrowOnError extends boolean = false> (options?: Options<UsersControllerFindAllRolesData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<UsersControllerFindAllRolesResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/admin/users/roles',
    ...options
  })
}

/**
 * Обновить роль пользователя
 */
export const usersControllerUpdateUserRole = <ThrowOnError extends boolean = false> (options: Options<UsersControllerUpdateUserRoleData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).put<UsersControllerUpdateUserRoleResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/admin/users/{roleId}/{userId}/roles',
    ...options
  })
}

/**
 * Удалить пользователя
 */
export const usersControllerRemove = <ThrowOnError extends boolean = false> (options: Options<UsersControllerRemoveData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<UsersControllerRemoveResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/admin/users/{id}',
    ...options
  })
}

/**
 * Получить пользователя
 */
export const usersControllerFindOne = <ThrowOnError extends boolean = false> (options: Options<UsersControllerFindOneData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<UsersControllerFindOneResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/admin/users/{id}',
    ...options
  })
}

/**
 * Обновить пользователя
 */
export const usersControllerUpdate = <ThrowOnError extends boolean = false> (options: Options<UsersControllerUpdateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<UsersControllerUpdateResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/admin/users/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Получить все файлы
 */
export const filesControllerFindAll = <ThrowOnError extends boolean = false> (options?: Options<FilesControllerFindAllData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<FilesControllerFindAllResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/files',
    ...options
  })
}

/**
 * Загрузить файл
 */
export const filesControllerCreate = <ThrowOnError extends boolean = false> (options: Options<FilesControllerCreateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<FilesControllerCreateResponse, unknown, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/files',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers
    }
  })
}

/**
 * Удалить файл
 */
export const filesControllerRemove = <ThrowOnError extends boolean = false> (options: Options<FilesControllerRemoveData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<FilesControllerRemoveResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/files/{id}',
    ...options
  })
}

/**
 * Получить один файл
 */
export const filesControllerFindOne = <ThrowOnError extends boolean = false> (options: Options<FilesControllerFindOneData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/files/{id}',
    ...options
  })
}

/**
 * Принять инвайт по ссылке приглашению
 */
export const workspaceControllerAcceptInvite = <ThrowOnError extends boolean = false> (options: Options<WorkspaceControllerAcceptInviteData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/workspaces/{id}/join/{code}',
    ...options
  })
}

export const workspaceControllerExcludeMember = <ThrowOnError extends boolean = false> (options: Options<WorkspaceControllerExcludeMemberData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/workspaces/{id}/exclude/{memberId}',
    ...options
  })
}

/**
 * Получить по id
 */
export const workspaceControllerFindOne = <ThrowOnError extends boolean = false> (options: Options<WorkspaceControllerFindOneData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<WorkspaceControllerFindOneResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/workspaces/{id}',
    ...options
  })
}

/**
 * Обновить ресурс по id
 */
export const workspaceControllerUpdate = <ThrowOnError extends boolean = false> (options: Options<WorkspaceControllerUpdateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<WorkspaceControllerUpdateResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/workspaces/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Получить список своих папок
 */
export const folderControllerFindAll = <ThrowOnError extends boolean = false> (options?: Options<FolderControllerFindAllData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<FolderControllerFindAllResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/folders',
    ...options
  })
}

/**
 * Создать папку
 */
export const folderControllerCreate = <ThrowOnError extends boolean = false> (options: Options<FolderControllerCreateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<FolderControllerCreateResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/folders',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const folderControllerRemove = <ThrowOnError extends boolean = false> (options: Options<FolderControllerRemoveData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/folders/{id}',
    ...options
  })
}

/**
 * Получить папку по id
 */
export const folderControllerFindOne = <ThrowOnError extends boolean = false> (options: Options<FolderControllerFindOneData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<FolderControllerFindOneResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/folders/{id}',
    ...options
  })
}

/**
 * Обновить папку по id
 */
export const folderControllerUpdate = <ThrowOnError extends boolean = false> (options: Options<FolderControllerUpdateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<FolderControllerUpdateResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/folders/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Добавить пользователя своего workspace в папку
 */
export const folderControllerAddMemberToFolder = <ThrowOnError extends boolean = false> (options: Options<FolderControllerAddMemberToFolderData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/folders/{id}/add-member/{memberId}',
    ...options
  })
}

/**
 * Удалить пользователя своего workspace из папку
 */
export const folderControllerRemoveMemberFromFolder = <ThrowOnError extends boolean = false> (options: Options<FolderControllerRemoveMemberFromFolderData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/folders/{id}/remove-member/{memberId}',
    ...options
  })
}

/**
 * Получить свои черновики презентации
 */
export const docsControllerDraftsFindAll = <ThrowOnError extends boolean = false> (options?: Options<DocsControllerDraftsFindAllData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<DocsControllerDraftsFindAllResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/draft',
    ...options
  })
}

/**
 * Создать черновик презентации
 */
export const docsControllerDraft = <ThrowOnError extends boolean = false> (options: Options<DocsControllerDraftData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<DocsControllerDraftResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/draft',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Получить сгенерированный контент слайдов для презентации
 */
export const docsControllerGenerateDoc = <ThrowOnError extends boolean = false> (options: Options<DocsControllerGenerateDocData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<DocsControllerGenerateDocResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/{draftId}/generate',
    ...options
  })
}

/**
 * Создать слайды для презентации
 */
export const docsControllerGenerateSlidesDoc = <ThrowOnError extends boolean = false> (options: Options<DocsControllerGenerateSlidesDocData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<DocsControllerGenerateSlidesDocResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/slides/generate',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Обновить черновик презентации
 */
export const docsControllerUpdateDraft = <ThrowOnError extends boolean = false> (options: Options<DocsControllerUpdateDraftData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<DocsControllerUpdateDraftResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/draft/{draftId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Загрузить файл
 */
export const docsControllerUploadFileAsPrompt = <ThrowOnError extends boolean = false> (options: Options<DocsControllerUploadFileAsPromptData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/upload',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers
    }
  })
}

/**
 * Получить свои презентации
 */
export const docsControllerFindAll = <ThrowOnError extends boolean = false> (options?: Options<DocsControllerFindAllData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<DocsControllerFindAllResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs',
    ...options
  })
}

/**
 * Удалить презентацию
 */
export const docsControllerRemove = <ThrowOnError extends boolean = false> (options: Options<DocsControllerRemoveData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/{id}',
    ...options
  })
}

/**
 * Получить презентацию
 */
export const docsControllerFindOne = <ThrowOnError extends boolean = false> (options: Options<DocsControllerFindOneData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<DocsControllerFindOneResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/{id}',
    ...options
  })
}

/**
 * Обновить презентацию
 */
export const docsControllerUpdate = <ThrowOnError extends boolean = false> (options: Options<DocsControllerUpdateData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<DocsControllerUpdateResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Удалить слайд презентации
 */
export const docsControllerRemoveSlide = <ThrowOnError extends boolean = false> (options: Options<DocsControllerRemoveSlideData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/{id}/slide/{slideId}',
    ...options
  })
}

/**
 * Обновить слайд презентации
 */
export const docsControllerUpdateSlide = <ThrowOnError extends boolean = false> (options: Options<DocsControllerUpdateSlideData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<DocsControllerUpdateSlideResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/docs/{id}/slide/{slideId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Получить все шрифты
 */
export const fontsControllerFindAll = <ThrowOnError extends boolean = false> (options?: Options<FontsControllerFindAllData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<FontsControllerFindAllResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/fonts',
    ...options
  })
}

/**
 * Получить шрифт
 */
export const fontsControllerFindOne = <ThrowOnError extends boolean = false> (options: Options<FontsControllerFindOneData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/fonts/{id}',
    ...options
  })
}

/**
 * Получить все темы
 */
export const themeControllerFindAll = <ThrowOnError extends boolean = false> (options?: Options<ThemeControllerFindAllData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<ThemeControllerFindAllResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/themes',
    ...options
  })
}

/**
 * Получить тему
 */
export const themeControllerFindOne = <ThrowOnError extends boolean = false> (options: Options<ThemeControllerFindOneData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/api/themes/{id}',
    ...options
  })
}
