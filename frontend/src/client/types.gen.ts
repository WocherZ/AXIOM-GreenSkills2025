// This file is auto-generated by @hey-api/openapi-ts

export type File = {
  id: string;
  fileKey: string;
  fileName: string;
  type: string;
  dir: string;
  size: number;
  extension: string;
  mime: string;
  s3id: string;
  createdAt: string;
  updatedAt: string;
  fileUrl: string;
}

export type Role = {
  id: string;
  name: string;
  slug: 'administrator' | 'user' | 'moderator';
}

export type User = {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  profileImage: File;
  role: Role;
  createdAt: string;
  updatedAt: string;
}

export type AuthLoginDto = {
  email: string;
  password: string;
}

export type AuthResponseDto = {
  readonly accessToken: string;
  readonly refreshToken: string;
  readonly expiresIn: number;
  readonly refreshExpiresIn: number;
}

export type AuthRegisterDto = {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
}

export type AuthRefreshTokenDto = {
  refreshToken: string;
}

export type AuthForgotPasswordDto = {
  email: string;
}

export type AuthResetPasswordDto = {
  email: string;
  hash: string;
  password: string;
  retryPassword: string;
}

export type AuthChangePasswordDto = {
  repeatPassword: string;
  newPassword: string;
}

export type UpdateProfileDto = {
  name: string;
  email: string;
}

export type CreateUserDto = {
  name: string;
  email: string;
  password: string;
  roleId: string;
}

export type UpdateUserDto = {
  name?: string;
  email?: string;
  password?: string;
  roleId?: string;
}

export type ResFileDto = {
  id: string;
  fileKey: string;
  fileName: string;
  type: string;
  dir: string;
  size: number;
  extension: string;
  mime: string;
  s3id: string;
  createdAt: string;
  updatedAt: string;
  fileUrl: string;
}

export type FilesUploadDto = {
  files: Blob | File;
  path: 'products/photos' | 'products/files' | 'prompt/files';
}

export type Theme = {
  id: string;
  name: string;
  headingFont: string;
  headingFontWeight: number;
  bodyFont: string;
  bodyFontWeight: number;
  accentColor: string;
  logoUrl: string;
  config: {
    [key: string]: unknown;
  }
  priority: number;
  previewUrl: string;
  archived: boolean;
  fonts: Array<string>;
  createdAt: string;
  updatedAt: string;
}

export type Workspace = {
  id: string;
  name: string;
  slug: string;
  inviteCode: string;
  workspaceMembers: Array<string>;
  workspaceMemberPermission: 'manage' | 'edit' | 'comment' | 'view' | 'forbidden';
  accessLinkPermission: 'manage' | 'edit' | 'comment' | 'view' | 'forbidden';
  theme: Theme;
  logo: File;
  disabled: boolean;
  disabledReason: boolean;
  disabledComment: boolean;
  createdAt: string;
  updatedAt: string;
}

export type UpdateWorkspaceDto = {
  name: string;
  logoId: string;
  themeId: string;
  workspacePermissionId: string;
  accessLinkPermissionId: string;
}

export type Folder = {
  id: string;
  name: string;
  slug: string;
  members: Array<string>;
  workspace: Workspace;
  workspaceId: string;
  memberCount: number;
  isMember: boolean;
  archived: boolean;
  createdAt: string;
  updatedAt: string;
}

export type CreateFolderDto = {
  name: string;
}

export type UpdateFolderDto = {
  name?: string;
}

export type DraftDocContentProps = {
  title: string;
  text: string;
  list?: Array<string>;
}

export type SlideContentWithImagesDto = {
  images: Array<string>;
  data: Array<DraftDocContentProps>;
}

export type ImageOptionsProps = {
  /**
   * License type
   */
  license?: string;
  /**
   * Provider name
   */
  provider?: string;
  /**
   * Generation style
   */
  generateStyle?: string;
  /**
   * Model name
   */
  model?: string;
  /**
   * Style preset
   */
  stylePreset?: string;
}

export type BackgroundProps = {
  /**
   * Background type
   */
  type?: string;
}

export type DocFlagsProps = {
  /**
   * Card layouts enabled flag
   */
  cardLayoutsEnabled?: boolean;
}

export type SettingsProps = {
  tone?: string;
  locale?: string;
  audience?: string;
  textMode?: string;
  editorMode?: string;
  textAmount?: string;
  imageProvider?: string;
  styleTemplate?: string;
  verticalAlign?: string;
  cardDimensions?: string;
  defaultFullBleed?: string;
  scaleContentToFit?: boolean;
  stylesDerivedFrom?: string;
  defaultContentWidth?: string;
  numCards?: number;
  themeId?: string;
  fontSize?: string;
  imageLicense?: string;
}

export type GenerateInfoProps = {
  /**
   * Interaction ID
   */
  interactionId?: string;
  /**
   * Stream ID
   */
  streamId?: string;
  /**
   * Last event ID
   */
  lastEventId?: string;
  /**
   * Last completed card ID
   */
  lastCompletedCardId?: string;
  /**
   * Last completed card index
   */
  lastCompletedCardIndex?: number;
}

export type CreateAttrsOptionsDto = {
  imageOptions?: ImageOptionsProps;
  background?: BackgroundProps;
  docFlags?: DocFlagsProps;
  /**
   * Format type
   */
  format?: string;
  /**
   * Custom code object
   */
  customCode?: {
    [key: string]: unknown;
  }
  settings?: SettingsProps;
  /**
   * Generate status
   */
  generateStatus?: string;
  generateInfo?: GenerateInfoProps;
  /**
   * Document ID
   */
  docId?: string;
}

export type MarksProps = {
  type: string;
  attrs?: {
    [key: string]: unknown;
  }
}

export type ContentProps = {
  /**
   * Text type
   */
  type: string;
  /**
   * Text content
   */
  text: string;
  marks?: Array<MarksProps>;
}

export type ContentSlideProps = {
  /**
   * Heading type
   */
  type?: string;
  /**
   * Heading attributes
   */
  attrs?: {
    [key: string]: unknown;
  }
  content?: Array<ContentProps>;
}

export type CreateSlidesPropsDto = {
  /**
   * Card attributes
   */
  attrs?: {
    [key: string]: unknown;
  }
  content?: Array<ContentSlideProps>;
}

export type CreateContentSlideDto = {
  documentId: string;
  slides?: Array<CreateSlidesPropsDto>;
}

export type DocSlidePropsDto = {
  attrs: CreateAttrsOptionsDto;
  content: CreateContentSlideDto;
}

export type DraftSlideContentProps = {
  title: string;
}

export type DocGenerateInput = {
  id: string;
  status: 'draft' | 'generate';
  prompt: string;
  content: Array<DraftSlideContentProps>;
  settings: SettingsProps;
  userId: string;
  createdBy: User;
  createdAt: string;
  updatedAt: string;
}

export type Document = {
  id: string;
  title: string;
  content: SlideContentWithImagesDto;
  preview: File;
  archived: boolean;
  slides: Array<DocSlidePropsDto>;
  isFavorite: boolean;
  workspace: Workspace;
  workspaceId: string;
  docGenerateInput: DocGenerateInput;
  docGenerateId: string;
  folder: Folder;
  folderId: string;
  theme: Theme;
  userId: string;
  createdBy: User;
  createdAt: string;
  updatedAt: string;
}

export type Slide = {
  id: string;
  attrs: CreateAttrsOptionsDto;
  content: CreateContentSlideDto;
  document: Document;
  documentId: string;
  createdAt: string;
  updatedAt: string;
}

export type DocGenerateDto = {
  prompt: string;
  settings?: SettingsProps;
}

export type UpdateDraftDocDto = {
  content?: Array<DraftSlideContentProps>;
  settings?: SettingsProps;
}

export type FileUploadDto = {
  file: Blob | File;
  path: 'products/photos' | 'products/files' | 'prompt/files';
  prompt: string;
}

export type UpdateDocDto = {
  title?: string;
  previewId?: string;
  folderId?: string;
  archived?: boolean;
  isFavorite?: boolean;
}

export type Font = {
  id: string;
  name: string;
  url: string;
}

export type PageMetaDto = {
  page: number;
  limit: number;
  itemCount: number;
  pageCount: number;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
}

export type AppControllerIsReadyData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/helthcheck';
}

export type AppControllerIsReadyResponses = {
  200: unknown;
}

export type AuthControllerLoginData = {
  body: AuthLoginDto;
  path?: never;
  query?: never;
  url: '/api/auth/login';
}

export type AuthControllerLoginErrors = {
  /**
   * Неверный логин или пароль
   */
  401: unknown;
  /**
   * Пользователь не найден
   */
  404: unknown;
}

export type AuthControllerLoginResponses = {
  200: AuthResponseDto;
}

export type AuthControllerLoginResponse = AuthControllerLoginResponses[keyof AuthControllerLoginResponses];

export type AuthControllerRegisterData = {
  body: AuthRegisterDto;
  path?: never;
  query?: never;
  url: '/api/auth/sign-up';
}

export type AuthControllerRegisterErrors = {
  /**
   * Неверный логин или пароль
   */
  400: unknown;
}

export type AuthControllerRegisterResponses = {
  201: unknown;
}

export type AuthControllerRefreshTokenData = {
  body: AuthRefreshTokenDto;
  path?: never;
  query?: never;
  url: '/api/auth/refresh-token';
}

export type AuthControllerRefreshTokenErrors = {
  /**
   * Неверный логин или пароль
   */
  400: unknown;
}

export type AuthControllerRefreshTokenResponses = {
  200: AuthResponseDto;
}

export type AuthControllerRefreshTokenResponse = AuthControllerRefreshTokenResponses[keyof AuthControllerRefreshTokenResponses];

export type AuthControllerForgotPasswordData = {
  body: AuthForgotPasswordDto;
  path?: never;
  query?: never;
  url: '/api/auth/forgot-password';
}

export type AuthControllerForgotPasswordResponses = {
  204: void;
}

export type AuthControllerForgotPasswordResponse = AuthControllerForgotPasswordResponses[keyof AuthControllerForgotPasswordResponses];

export type AuthControllerResetPasswordData = {
  body: AuthResetPasswordDto;
  path?: never;
  query?: never;
  url: '/api/auth/reset-password';
}

export type AuthControllerResetPasswordResponses = {
  204: void;
}

export type AuthControllerResetPasswordResponse = AuthControllerResetPasswordResponses[keyof AuthControllerResetPasswordResponses];

export type AuthControllerChangePasswordData = {
  body: AuthChangePasswordDto;
  path?: never;
  query?: never;
  url: '/api/auth/change-password';
}

export type AuthControllerChangePasswordErrors = {
  /**
   * Неверный пароль
   */
  401: unknown;
  /**
   * Пользователь не найден
   */
  404: unknown;
}

export type AuthControllerChangePasswordResponses = {
  204: void;
}

export type AuthControllerChangePasswordResponse = AuthControllerChangePasswordResponses[keyof AuthControllerChangePasswordResponses];

export type AuthControllerGetProfileData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/auth/me';
}

export type AuthControllerGetProfileErrors = {
  /**
   * Пользователь не найден
   */
  404: unknown;
}

export type AuthControllerGetProfileResponses = {
  200: User;
}

export type AuthControllerGetProfileResponse = AuthControllerGetProfileResponses[keyof AuthControllerGetProfileResponses];

export type AuthControllerUpdateProfileData = {
  body: UpdateProfileDto;
  path?: never;
  query?: never;
  url: '/api/auth/me';
}

export type AuthControllerUpdateProfileErrors = {
  /**
   * Пользователь не найден
   */
  404: unknown;
}

export type AuthControllerUpdateProfileResponses = {
  200: unknown;
}

export type AuthControllerLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/auth/logout';
}

export type AuthControllerLogoutResponses = {
  204: void;
}

export type AuthControllerLogoutResponse = AuthControllerLogoutResponses[keyof AuthControllerLogoutResponses];

export type UsersControllerFindAllData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    limit?: number;
  }
  url: '/api/admin/users';
}

export type UsersControllerFindAllResponses = {
  200: {
    data: Array<User>;
    meta?: PageMetaDto;
  }
}

export type UsersControllerFindAllResponse = UsersControllerFindAllResponses[keyof UsersControllerFindAllResponses];

export type UsersControllerCreateData = {
  body: CreateUserDto;
  path?: never;
  query?: never;
  url: '/api/admin/users';
}

export type UsersControllerCreateResponses = {
  200: User;
}

export type UsersControllerCreateResponse = UsersControllerCreateResponses[keyof UsersControllerCreateResponses];

export type UsersControllerFindAllRolesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/admin/users/roles';
}

export type UsersControllerFindAllRolesResponses = {
  200: {
    data: Array<Role>;
    meta?: PageMetaDto;
  }
}

export type UsersControllerFindAllRolesResponse = UsersControllerFindAllRolesResponses[keyof UsersControllerFindAllRolesResponses];

export type UsersControllerUpdateUserRoleData = {
  body?: never;
  path: {
    roleId: string;
    userId: string;
  }
  query?: never;
  url: '/api/admin/users/{roleId}/{userId}/roles';
}

export type UsersControllerUpdateUserRoleResponses = {
  200: {
    data: Array<User>;
    meta?: PageMetaDto;
  }
}

export type UsersControllerUpdateUserRoleResponse = UsersControllerUpdateUserRoleResponses[keyof UsersControllerUpdateUserRoleResponses];

export type UsersControllerRemoveData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/admin/users/{id}';
}

export type UsersControllerRemoveErrors = {
  /**
   * Пользователь не найден
   */
  404: unknown;
}

export type UsersControllerRemoveResponses = {
  204: void;
}

export type UsersControllerRemoveResponse = UsersControllerRemoveResponses[keyof UsersControllerRemoveResponses];

export type UsersControllerFindOneData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/admin/users/{id}';
}

export type UsersControllerFindOneErrors = {
  /**
   * Пользователь не найден
   */
  404: unknown;
}

export type UsersControllerFindOneResponses = {
  200: User;
}

export type UsersControllerFindOneResponse = UsersControllerFindOneResponses[keyof UsersControllerFindOneResponses];

export type UsersControllerUpdateData = {
  body: UpdateUserDto;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/admin/users/{id}';
}

export type UsersControllerUpdateErrors = {
  /**
   * Пользователь не найден
   */
  404: unknown;
}

export type UsersControllerUpdateResponses = {
  200: User;
}

export type UsersControllerUpdateResponse = UsersControllerUpdateResponses[keyof UsersControllerUpdateResponses];

export type FilesControllerFindAllData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    limit?: number;
  }
  url: '/api/files';
}

export type FilesControllerFindAllResponses = {
  200: {
    data: Array<ResFileDto>;
    meta?: PageMetaDto;
  }
}

export type FilesControllerFindAllResponse = FilesControllerFindAllResponses[keyof FilesControllerFindAllResponses];

export type FilesControllerCreateData = {
  /**
   * Загрузить один файл
   */
  body: FilesUploadDto;
  path?: never;
  query: {
    path: string;
  }
  url: '/api/files';
}

export type FilesControllerCreateResponses = {
  200: ResFileDto;
}

export type FilesControllerCreateResponse = FilesControllerCreateResponses[keyof FilesControllerCreateResponses];

export type FilesControllerRemoveData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/files/{id}';
}

export type FilesControllerRemoveErrors = {
  /**
   * Файл не найден
   */
  404: unknown;
}

export type FilesControllerRemoveResponses = {
  204: void;
}

export type FilesControllerRemoveResponse = FilesControllerRemoveResponses[keyof FilesControllerRemoveResponses];

export type FilesControllerFindOneData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/files/{id}';
}

export type FilesControllerFindOneErrors = {
  /**
   * Файл не найден
   */
  404: unknown;
}

export type FilesControllerFindOneResponses = {
  200: unknown;
}

export type WorkspaceControllerAcceptInviteData = {
  body?: never;
  path: {
    id: string;
    code: string;
  }
  query?: never;
  url: '/api/workspaces/{id}/join/{code}';
}

export type WorkspaceControllerAcceptInviteResponses = {
  201: unknown;
}

export type WorkspaceControllerExcludeMemberData = {
  body?: never;
  path: {
    id: string;
    memberId: string;
  }
  query?: never;
  url: '/api/workspaces/{id}/exclude/{memberId}';
}

export type WorkspaceControllerExcludeMemberResponses = {
  200: unknown;
}

export type WorkspaceControllerFindOneData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/workspaces/{id}';
}

export type WorkspaceControllerFindOneErrors = {
  /**
   * Ресурс не найден
   */
  404: unknown;
}

export type WorkspaceControllerFindOneResponses = {
  200: Workspace;
}

export type WorkspaceControllerFindOneResponse = WorkspaceControllerFindOneResponses[keyof WorkspaceControllerFindOneResponses];

export type WorkspaceControllerUpdateData = {
  body: UpdateWorkspaceDto;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/workspaces/{id}';
}

export type WorkspaceControllerUpdateErrors = {
  /**
   * Ресурс не найден
   */
  404: unknown;
}

export type WorkspaceControllerUpdateResponses = {
  200: Workspace;
}

export type WorkspaceControllerUpdateResponse = WorkspaceControllerUpdateResponses[keyof WorkspaceControllerUpdateResponses];

export type FolderControllerFindAllData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/folders';
}

export type FolderControllerFindAllResponses = {
  200: Array<Folder>;
}

export type FolderControllerFindAllResponse = FolderControllerFindAllResponses[keyof FolderControllerFindAllResponses];

export type FolderControllerCreateData = {
  body: CreateFolderDto;
  path?: never;
  query?: never;
  url: '/api/folders';
}

export type FolderControllerCreateErrors = {
  /**
   * Название папки должно быть уникальным
   */
  400: unknown;
}

export type FolderControllerCreateResponses = {
  200: Folder;
}

export type FolderControllerCreateResponse = FolderControllerCreateResponses[keyof FolderControllerCreateResponses];

export type FolderControllerRemoveData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/folders/{id}';
}

export type FolderControllerRemoveResponses = {
  200: unknown;
}

export type FolderControllerFindOneData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/folders/{id}';
}

export type FolderControllerFindOneResponses = {
  200: Folder;
}

export type FolderControllerFindOneResponse = FolderControllerFindOneResponses[keyof FolderControllerFindOneResponses];

export type FolderControllerUpdateData = {
  body: UpdateFolderDto;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/folders/{id}';
}

export type FolderControllerUpdateErrors = {
  /**
   * Название папки должно быть уникальным
   */
  400: unknown;
}

export type FolderControllerUpdateResponses = {
  200: Folder;
}

export type FolderControllerUpdateResponse = FolderControllerUpdateResponses[keyof FolderControllerUpdateResponses];

export type FolderControllerAddMemberToFolderData = {
  body?: never;
  path: {
    id: string;
    memberId: string;
  }
  query?: never;
  url: '/api/folders/{id}/add-member/{memberId}';
}

export type FolderControllerAddMemberToFolderResponses = {
  200: unknown;
}

export type FolderControllerRemoveMemberFromFolderData = {
  body?: never;
  path: {
    id: string;
    memberId: string;
  }
  query?: never;
  url: '/api/folders/{id}/remove-member/{memberId}';
}

export type FolderControllerRemoveMemberFromFolderResponses = {
  200: unknown;
}

export type DocsControllerDraftsFindAllData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    limit?: number;
  }
  url: '/api/docs/draft';
}

export type DocsControllerDraftsFindAllResponses = {
  200: {
    data: Array<DocGenerateInput>;
    meta?: PageMetaDto;
  }
}

export type DocsControllerDraftsFindAllResponse = DocsControllerDraftsFindAllResponses[keyof DocsControllerDraftsFindAllResponses];

export type DocsControllerDraftData = {
  body: DocGenerateDto;
  path?: never;
  query?: never;
  url: '/api/docs/draft';
}

export type DocsControllerDraftResponses = {
  200: DocGenerateInput;
}

export type DocsControllerDraftResponse = DocsControllerDraftResponses[keyof DocsControllerDraftResponses];

export type DocsControllerGenerateDocData = {
  body?: never;
  path: {
    draftId: string;
  }
  query?: never;
  url: '/api/docs/{draftId}/generate';
}

export type DocsControllerGenerateDocResponses = {
  200: Document;
}

export type DocsControllerGenerateDocResponse = DocsControllerGenerateDocResponses[keyof DocsControllerGenerateDocResponses];

export type DocsControllerGenerateSlidesDocData = {
  body: CreateContentSlideDto;
  path?: never;
  query?: never;
  url: '/api/docs/slides/generate';
}

export type DocsControllerGenerateSlidesDocResponses = {
  200: Array<Slide>;
}

export type DocsControllerGenerateSlidesDocResponse = DocsControllerGenerateSlidesDocResponses[keyof DocsControllerGenerateSlidesDocResponses];

export type DocsControllerUpdateDraftData = {
  body: UpdateDraftDocDto;
  path: {
    draftId: string;
  }
  query?: never;
  url: '/api/docs/draft/{draftId}';
}

export type DocsControllerUpdateDraftResponses = {
  200: DocGenerateInput;
}

export type DocsControllerUpdateDraftResponse = DocsControllerUpdateDraftResponses[keyof DocsControllerUpdateDraftResponses];

export type DocsControllerUploadFileAsPromptData = {
  /**
   * Загрузить один файл
   */
  body: FileUploadDto;
  path?: never;
  query?: never;
  url: '/api/docs/upload';
}

export type DocsControllerUploadFileAsPromptResponses = {
  201: unknown;
}

export type DocsControllerFindAllData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    limit?: number;
  }
  url: '/api/docs';
}

export type DocsControllerFindAllResponses = {
  200: {
    data: Array<Document>;
    meta?: PageMetaDto;
  }
}

export type DocsControllerFindAllResponse = DocsControllerFindAllResponses[keyof DocsControllerFindAllResponses];

export type DocsControllerRemoveData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/docs/{id}';
}

export type DocsControllerRemoveErrors = {
  /**
   * Презентация не найдена
   */
  404: unknown;
}

export type DocsControllerRemoveResponses = {
  201: unknown;
}

export type DocsControllerFindOneData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/docs/{id}';
}

export type DocsControllerFindOneErrors = {
  /**
   * Презентация не найдена
   */
  404: unknown;
}

export type DocsControllerFindOneResponses = {
  200: Document;
}

export type DocsControllerFindOneResponse = DocsControllerFindOneResponses[keyof DocsControllerFindOneResponses];

export type DocsControllerUpdateData = {
  body: UpdateDocDto;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/docs/{id}';
}

export type DocsControllerUpdateErrors = {
  /**
   * Презентация не найдена
   */
  404: unknown;
}

export type DocsControllerUpdateResponses = {
  200: Document;
}

export type DocsControllerUpdateResponse = DocsControllerUpdateResponses[keyof DocsControllerUpdateResponses];

export type DocsControllerRemoveSlideData = {
  body?: never;
  path: {
    id: string;
    slideId: string;
  }
  query?: never;
  url: '/api/docs/{id}/slide/{slideId}';
}

export type DocsControllerRemoveSlideErrors = {
  /**
   * Слайд не найден
   */
  404: unknown;
}

export type DocsControllerRemoveSlideResponses = {
  201: unknown;
}

export type DocsControllerUpdateSlideData = {
  body: DocSlidePropsDto;
  path: {
    id: string;
    slideId: string;
  }
  query?: never;
  url: '/api/docs/{id}/slide/{slideId}';
}

export type DocsControllerUpdateSlideErrors = {
  /**
   * Слайд не найден
   */
  404: unknown;
}

export type DocsControllerUpdateSlideResponses = {
  200: Slide;
}

export type DocsControllerUpdateSlideResponse = DocsControllerUpdateSlideResponses[keyof DocsControllerUpdateSlideResponses];

export type FontsControllerFindAllData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    limit?: number;
  }
  url: '/api/fonts';
}

export type FontsControllerFindAllResponses = {
  200: {
    data: Array<Font>;
    meta?: PageMetaDto;
  }
}

export type FontsControllerFindAllResponse = FontsControllerFindAllResponses[keyof FontsControllerFindAllResponses];

export type FontsControllerFindOneData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/fonts/{id}';
}

export type FontsControllerFindOneErrors = {
  /**
   * Шрифт не найден
   */
  404: unknown;
}

export type FontsControllerFindOneResponses = {
  200: unknown;
}

export type ThemeControllerFindAllData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    limit?: number;
  }
  url: '/api/themes';
}

export type ThemeControllerFindAllResponses = {
  200: {
    data: Array<Theme>;
    meta?: PageMetaDto;
  }
}

export type ThemeControllerFindAllResponse = ThemeControllerFindAllResponses[keyof ThemeControllerFindAllResponses];

export type ThemeControllerFindOneData = {
  body?: never;
  path: {
    id: string;
  }
  query?: never;
  url: '/api/themes/{id}';
}

export type ThemeControllerFindOneErrors = {
  /**
   * Шрифт не найден
   */
  404: unknown;
}

export type ThemeControllerFindOneResponses = {
  200: unknown;
}

export type ClientOptions = {
  baseUrl: string;
}
