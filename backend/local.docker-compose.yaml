version: '3'

services:
  app:
    container_name: gamma.back
    image: gamma.app
    build:
      context: ./docker
    restart: 'unless-stopped'
    environment:
      - RUN_SEED=${RUN_SEED:-false}
    volumes:
      - ./nginx/app.conf:/etc/nginx/http.d/app.conf
    env_file:
      - ./docker/.env.local
    ports:
      - ${PORT}
    depends_on:
      db:
        condition: service_healthy
  nginx:
    image: nginx:1.26.2
    command: ["nginx", "-g", "daemon off;", "-c", "/etc/nginx/nginx.conf"]
    volumes:
      - ./nginx/app.conf:/etc/nginx/conf.d/app.conf
    container_name: nginx
    restart: 'unless-stopped'
    ports:
      - 8080:8080
    depends_on:
      - app
  db:
    image: 'postgres:16'
    container_name: skills-postgres
    restart: 'unless-stopped'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
  minio:
    image: minio/minio
    container_name: minio
    restart: 'unless-stopped'
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server --console-address ":9001" /data
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://127.0.0.1:9000/minio/health/live; }    # check if Minio is alive
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                   # start Minio in the background
        while ! isAlive; do sleep 0.1; done                                # wait until Minio is alive
        mc alias set minio http://127.0.0.1:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD; # setup Minio client
        mc mb minio/$$MINIO_BUCKET_NAME || true                                    # create a test bucket
        mc anonymous set public minio/$$MINIO_BUCKET_NAME
        mc anonymous set download minio/$$MINIO_BUCKET_NAME
        mc admin accesskey create minio/ --access-key $$MINIO_ACCESS_KEY --secret-key $$MINIO_SECRET_KEY --name "backstage"
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid             # stop Minio
        while isAlive; do sleep 0.1; done                                  # wait until Minio is stopped
        exec minio $0 "$@"                                                 # start Minio in the foreground
      '
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
  redis:
    image: redis:7
    container_name: skills-redis
    restart: 'unless-stopped'
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

volumes:
  minio_data:
  redis_data:
  postgres_data:
